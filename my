#!/bin/bash

# Bring the Fun-ctions...


firstrun()
{
  if [[ -z $DBHOME ]]
    then
      echo "DBHOME has not been declared"
    else
      if [[ ! -d $DBHOME ]]
        then
          mkdir -p $DBHOME
      fi

      for dir in ${req_dir[@]}
      do
        if [[ -d $DBHOME/$dir ]]
          then
            echo "$dir already exists in $DBHOME"
          else
            echo "creating $DBHOME/$dir"
            mkdir $DBHOME/$dir
          fi
      done
    fi
}

getvar()
{
  grep $1 $2 | grep -v mysqld | cut -d '=' -f 2 | tail -n 1 | tr -d ' '
}

help()
{
echo "Usage:

  help,     this message

  firstrun, setup directories and default template.

  build,    build a MySQL server config:
            i.e. my build foo 3306 100

  install,  install instance from built config
            i.e. my install foo

  status,   MySQL/MariaDB instance status
            my status, for all instances

  start/stop

  use,      login to a server
            i.e. my use foo

  --
"
  exit 0
}

install()
{
  if [[ -d $DATADIR/$SERVERNAME ]]
    then
      echo "$DATADIR/$SERVERNAME already exists, aborting"
      exit 1
    else
      mkdir $DATADIR/$SERVERNAME
      CONFIGFILE=$CONFDIR/$SERVERNAME.cnf
      cd $DBINSTDIR/mysql/
      ./scripts/mysql_install_db --defaults-file=$CONFIGFILE 2>&1 | egrep -i 'mysqladmin|secure'
      exit 0
  fi
}

start()
{
  SERVERPORT=$(getvar port $CONFIGFILE)
  echo "Starting $SERVERNAME on $SERVERPORT"
  mysqld_safe --defaults-file=$CONFIGFILE --ledir=$BASEDIR/bin > /tmp/$SERVERNAME.log 2>&1 &
  sleep 2
  cat /tmp/$SERVERNAME.log
  exit 0
}

stop()
{
  SERVERPORT=$(getvar port $CONFIGFILE)
  SERVERSOCK=$(getvar socket $CONFIGFILE)
  echo "Stopping $SERVERNAME on $SERVERPORT"
  mysqladmin -u root --socket=$SERVERSOCK -P $SERVERPORT shutdown
  exit 0
}

status()
{
  CONFCOUNT=$(ls $CONFDIR | wc -l)
  if [[ $CONFCOUNT < 1 ]]
    then
    echo "No configs found in $CONFDIR, run 'my build' first"
    exit 0
  fi

  for conf in $(ls $CONFDIR/*.cnf)
    do
      SERVERNAME=$(basename $conf .cnf)
      SERVERPORT=$(getvar port $CONFIGFILE)
      SERVERSOCK=$(getvar socket $CONFIGFILE)
      if [[ -e $DATADIR/$SERVERNAME/mysql.pid ]]
        then
          MASTERSTATUS=$(mysql -uroot -P$SERVERPORT --socket=$SERVERSOCK -Be "SHOW MASTER STATUS;" | tail -1)
          SERVERSTATUS=$(mysql -uroot -P$SERVERPORT --socket=$SERVERSOCK -Be "SELECT 'ONLINE';" | tail -1)
          MASTERLOGFILE=$(echo $MASTERSTATUS | awk '{print $1}')
          MASTERLOGPOS=$(echo $MASTERSTATUS | awk '{print $2}')
          MASTERDO=$(echo $MASTERSTATUS | awk '{print $3}')
          MASTERIGNORE=$(echo $MASTERSTATUS | awk '{print $4}')
          MASTERLOGGTID=$(echo $MASTERSTATUS | awk '{print $5}')

          echo -e "$SERVERNAME\t$SERVERSTATUS\t$MASTERLOGFILE\t$MASTERLOGPOS\t$MASTERLOGGTID"
        else
          echo -e "$SERVERNAME\tOFFLINE"
      fi
    done
}

use()
{
  SERVERPORT=$(getvar port $CONFIGFILE)
  SERVERSOCK=$(getvar socket $CONFIGFILE)
  mysql -P $SERVERPORT -uroot --socket=$SERVERSOCK
}

selectversion()
{
select MYVER in $DBINSTDIR/*;
do
  BASEDIR=$(basename $MYVER .tar.gz)
  if [[ ! -d $BASEDIR ]]
  then
    echo "$BASEDIR not found, extracting $MYVER"
    tar -xf $MYVER -C $DBINSTDIR
  fi
  echo "Using $MYVER"
  break
done
}

selecttemplate()
{
select MYTEMPLATE in $TEMPLATEDIR/*;
do
  export CONFIGTEMPLATE=$MYTEMPLATE
  echo "Using $CONFIGTEMPLATE"
  break
done
}

build()
{
if [[ ! -d $DBINSTDIR ]]
then
  echo "$DBINSTDIR does not exist, aborting"
  exit 1
else
  selecttemplate
  selectversion
fi

if [[ -z $BASEDIR && -z $CONFIGTEMPLATE ]]
then
  echo "Need a Version and Config Template, aborting"
  exit 1

else
  if [[ -e $CONFDIR/$SERVERNAME.cnf ]]
    then
      echo "$SERVERNAME.cnf already exists! Overwrite?"
      select yn in "Yes" "No"; do
        case $yn in
          Yes ) break;;
          No ) exit 0;;
        esac
      done
  fi

  echo "Adding new detaults to $CONFDIR/$SERVERNAME.cnf"
  if [[ -e $CONFDIR/$SERVERNAME.cnf ]]
    then
        echo -e "
[mysqld]
!include $TEMPLATEDIR/$CONFIGTEMPLATE.cnf

user                = $USER
server-id           = $ID
basedir             = $BASEDIR
tmpdir              = $TMPDIR
port                = $PORT
datadir             = $DATADIR/$SERVERNAME
socket              = $DATADIR/$SERVERNAME/mysql.sock
pid_file            = $DATADIR/$SERVERNAME/mysql.pid
log-bin             = $DATADIR/$SERVERNAME/mysql-log-bin
log-bin-index       = $DATADIR/$SERVERNAME/mysql-log-bin.index
log_error           = $DATADIR/$SERVERNAME/error.log
slow_query_log_file = $DATADIR/$SERVERNAME/slow.log
" > $CONFDIR/$SERVERNAME.cnf
      exit 0
    else
      echo "$CONFDIR/$SERVERNAME.cnf not found? Exiting."
      exit 1
  fi

fi
}


# MAIN with lazy evaluation
# Add check for mysql lib in $LD_LIBRARY_PATH and maybe DYLD_LIBRARY_PATH on mac.

declare -a req_dir=(verions configs templates data)
ERRORCOUNTER=0

if [[ -z $DBHOME ]]
then
  echo "DBHOME not defined"
  let ERRORCOUNTER+=1
fi

if [[ -z $DBINSTDIR ]]
then
  echo "DBHOME not defined"
  let ERRORCOUNTER+=1
elif [[ ! -d $DBINSTDIR ]]
then
  echo "DBINSTDIR defined, but directory does not exist"
  let ERRORCOUNTER+=1
fi

if [[ $ERRORCOUNTER -ne 0 ]]
then
  echo "Errors encountred, aborting"
  echo "DBHOME: $DBHOME"
  echo "DBHOME: $DBINSTDIR"
else
  CONFDIR=$DBHOME/configs
  TEMPLATEDIR=$DBHOME/templates
  DATADIR=$DBHOME/data
  if [[ ! -d $DBHOME ]]
    then
      echo "$DBHOME does not exist, run setup?"
      select yn in "Yes" "No"; do
        case $yn in
          Yes ) firstrun
                break
                ;;
          No )  echo "please create $DBHOME manually"
                exit 1
                ;;
        esac
      done
  fi
fi

if [[ $1 == "build" ]]
  then
    if [[ $# -ne 4 ]]
      then
        echo "Wrong Parameters"
        help
        exit 1
      else
        SERVERNAME=$2
        PORT=$3
        ID=$4
    fi
fi

if [[ $1 == "install" ]]
  then
    if [[ $# -ne 2 ]]
      then
        echo "Wrong Paramters"
        help
        exit 1
      else
        CONFIGFILE=$CONFDIR/$2.cnf
        SERVERNAME=$2
    fi
fi

if [[ -z $1 ]]
  then
  help
  exit 0
else
    if [[ "`type -t $1`" = 'function'  ]]
      then
        CONFIGFILE=$CONFDIR/$2.cnf
        SERVERNAME=$2
        $1
      else
        echo "That is not a valid command"
        help
        exit 1
    fi
fi
