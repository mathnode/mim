#!/bin/bash


export MIMHOME=${HOME}/.mim
export BASEDIR=$(dirname $(which mysqld))


firstrun()
{
	if [[ ! -d $MIMHOME ]]
	then
	    mkdir -p $MIMHOME
	fi

	for dir in ${req_dir[@]}
	do
	    if [[ -d $MIMHOME/$dir ]]
	    then
		echo "$dir already exists in $MIMHOME"
	    else
		echo "creating $MIMHOME/$dir"
		mkdir $MIMHOME/$dir
	    fi
	done
}

getvar()
{
    grep -w $1 $2 | grep -v mysqld | cut -d '=' -f 2 | tail -n 1 | tr -d ' '
}

allports()
{
    #declare -a ALLPORTS
    ALLPORTS=()
    for conf in $CONFDIR/*
    do
	p=$(getvar port $conf)
	ALLPORTS+=(p)
    done

}

printstatus()
{
    printf "%-8s %4s %-8s %-20s %s %s %s\n" $1 $2 $3 $4 $5 $6 $7
}

showhelp()
{
printf "Setup:\n--
setup\trun through first run setup
status\tshow installed server status
aliases\tshow aliases for all instances
\nInstance Management:\n--
create\t[server name]\t[port]\tcreate and install a server from config
drop\t[server name]\tdrops instance datadir AND config!
start\t[server name]
stop\t[server name]
all\t'[SQL Command]'\t Send SQL to all running instances, return to STDOUT
\nGalera Cluster:\n--
start\t[server name] new\tThis starts a new cluster
start\t[server name] add [server name]\tThis adds an instance to an existing cluster
\nShell Helpers:\n--
client\t[server name]\tproduce path variables for your shell to STDOUT
aliases\tproduce a list of aliases for all available instances to STDOUT
help\tthis message
"
exit 0
}

start()
{
    echo '' > /tmp/$SERVERNAME.log
    SERVERPORT=$(getvar port $CONFIGFILE)
    echo "Starting $SERVERNAME on $SERVERPORT"
    mysqld_safe --defaults-file=$CONFIGFILE $CLUSTERCMD > /tmp/$SERVERNAME.log 2>&1 &
    sleep 2
    cat /tmp/$SERVERNAME.log
}

stop()
{
    SERVERPORT=$(getvar port $CONFIGFILE)
    SERVERSOCK=$(getvar socket $CONFIGFILE)
    echo "Stopping $SERVERNAME on $SERVERPORT"
    mysqladmin -uroot --socket=$SERVERSOCK -P $SERVERPORT shutdown
}

status()
{
    if [[  $(ls -1 $CONFDIR | wc -l | tr -d ' ') -lt 1 ]]
    then
	echo "No configs found in $CONFDIR, run 'my build' first"
	exit 0
    fi

    for conf in $(ls $CONFDIR/*.cnf)
    do
	SERVERNAME=$(basename $conf .cnf)
	SERVERPORT=$(getvar port $conf)
	SERVERSOCK=$(getvar socket $conf)
	SERVERPID=$(getvar pid_file $conf)
	MYSQLBIN=$(getvar basedir $conf)/bin/mysql
	if [[ -e $SERVERPID ]]
	then
	    MASTERSTATUS=$($MYSQLBIN -uroot -P$SERVERPORT --socket=$SERVERSOCK -NBe "SHOW MASTER STATUS;")
	    SERVERSTATUS=$($MYSQLBIN -uroot -P$SERVERPORT --socket=$SERVERSOCK -NBe "SELECT 'ONLINE';")
	    SERVERVERSION=$($MYSQLBIN -uroot -P$SERVERPORT --socket=$SERVERSOCK -NBe "SELECT @@version;")
	    MASTERLOGFILE=$(echo $MASTERSTATUS | awk '{print $1}')
	    MASTERLOGPOS=$(echo $MASTERSTATUS | awk '{print $2}')
	    MASTERDO=$(echo $MASTERSTATUS | awk '{print $3}')
	    MASTERIGNORE=$(echo $MASTERSTATUS | awk '{print $4}')
	    MASTERLOGGTID=$(echo $MASTERSTATUS | awk '{print $5}')

	    printstatus $SERVERNAME $SERVERPORT $SERVERSTATUS $SERVERVERSION $MASTERLOGFILE $MASTERLOGPOS $MASTERLOGGTID
	else
	    printstatus $SERVERNAME $SERVERPORT "OFFLINE"
	fi
    done
}

aliases()
{
    if [[  $(ls -1 $CONFDIR | wc -l | tr -d ' ') -lt 1 ]]
    then
	echo "No configs found in $CONFDIR, run 'my build' first"
	exit 0
    else
	for conf in $CONFDIR/*.cnf
	do
	    SERVERNAME=$(basename $conf .cnf)
	    SERVERPORT=$(getvar port $conf)
	    SERVERSOCK=$(getvar socket $conf)
	    PROMPTOPT="\"${SERVERNAME}:${SERVERPORT} [\d] > \""
	    printf "alias ${SERVERNAME}='mysql -P${SERVERPORT} --socket=${SERVERSOCK} --prompt=${PROMPTOPT}'\n"
	done
    fi
}

do_all()
{
    if [[  $(ls -1 $CONFDIR | wc -l | tr -d ' ') -lt 1 ]]
    then
	echo "No configs found in $CONFDIR, run 'my build' first"
	exit 0
    else
	for conf in $CONFDIR/*.cnf
	do
	    SERVERNAME=$(basename $conf .cnf)
	    SERVERPORT=$(getvar port $conf)
	    SERVERSOCK=$(getvar socket $conf)
	    MYSQLALIVE=$(mysqladmin -uroot --socket=$SERVERSOCK ping 2>/dev/null | wc -l)

	    if [[ $MYSQLALIVE -ne 0 ]]
	    then
		printf "${SERVERNAME}\n--\n"
		mysql -uroot --socket=$SERVERSOCK -NBe "${DO};"
	    fi
	done
    fi
}

use()
{
    if [[ -z $SERVERNAME ]]
    then
	echo "Missing parameter"
	showhelp
	exit 0
    else
	SERVERPORT=$(getvar port $CONFIGFILE)
	SERVERSOCK=$(getvar socket $CONFIGFILE)
	MYSQLBIN=$(getvar basedir $CONFIGFILE)/bin/mysql
	$MYSQLBIN -P $SERVERPORT -uroot --socket=$SERVERSOCK
    fi
}

drop()
{
    if [[ $DELDATADIR -eq 1 ]]
    then
	echo "Removing: $DATADIR"
	rm -Rf $DATADIR
    fi

    if [[ $DELCONFIGFILE -eq 1 ]]
    then
	echo "Removing: $CONFIGFILE"
	rm $CONFIGFILE
    fi

    exit 0

}

selectextraconfig()
{
    select EXTRA_CONFIG in $EXTRA_CONFIGS_DIR/*;
    do
	export EXTRA_CONFIG=$MYEXTRA_CONFIG
	echo "Using $EXTRA_CONFIG"
	break
    done
}

create()
{
	selectextraconfig

	if [[ -e $CONFDIR/${SERVERNAME}.cnf ]]
	then
	    echo "${SERVERNAME}.cnf already exists! Overwrite?"
	    select yn in "Yes" "No"; do
		case $yn in
		    Yes ) break;;
		No ) exit 0;;
	    esac
	done
    else touch $CONFDIR/${SERVERNAME}.cnf
    fi
    if [[ -z ${EXTRA_CONFIG} ]]
	then
		INCLUDE_LINE=""
	else
		INCLUDE_LINE="!include ${EXTRA_CONFIG}"
	fi

    echo "Adding new detaults to $CONFDIR/${SERVERNAME}.cnf"
    if [[ -e $CONFDIR/${SERVERNAME}.cnf ]]
    then
	echo -e "
[mysqld]
user = $USER
server-id = $ID
basedir = $BASEDIR
tmpdir = $TMPDIR
port = $PORT
datadir = $DATADIR
socket = $DATADIR/mysql.sock
pid_file = $DATADIR/mysql.pid
log-bin = $DATADIR/binlog
log-bin-index = $DATADIR/binlog.index
log_error = $DATADIR/error.log
slow_query_log_file = $DATADIR/slow.log

${INCLUDE_LINE}" > $CONFDIR/${SERVERNAME}.cnf
	exit 0
    else
	echo "$CONFDIR/${SERVERNAME}.cnf not found? Exiting."
	exit 1
    fi

    DATADIR=$(getvar datadir $CONFIGFILE)
    TMPDIR=$(getvar tmpdir $CONFIGFILE)
    if [[ -d $DATADIR ]]
    then
	echo "$DATADIR already exists, aborting"
	exit 1
    else
	mkdir -p $TMPDIR
	if [[ -d $TMPDIR ]]
	then
	    mysql_install_db --defaults-file=$CONFIGFILE 2>&1
	    exit 0
	else
	    echo "Creating $TMPDIR failed, aborting"
	    exit 1
	fi
    fi


}


### MAIN ###
declare -a req_dir=(configs extra_configs data)
ERRORCOUNTER=0

if [[ -z $MIMHOME ]]
then
    echo "MIMHOME not defined"
    let ERRORCOUNTER+=1
fi

if [[ $ERRORCOUNTER -ne 0 ]]
then
    echo "Errors encountred, aborting"
    exit 0
else
    CONFDIR=$MIMHOME/configs
    EXTRA_CONFIGS_DIR=$MIMHOME/extra_configs
    if [[ ! -d $MIMHOME ]]
    then
	echo "$MIMHOME does not exist, run setup?"
	select yn in "Yes" "No"; do
	    case $yn in
		Yes ) firstrun
		    break
		    ;;
		No ) exit 0
		    ;;
	    esac
	done
    fi
fi

if [[ -z $1 ]]
then
    showhelp
    exit 0
fi

if [[ $1 == "status" ]]
then
    status
    exit 0
fi

if [[ $1 == "setup" ]]
then
    firstrun
    exit 0
fi

if [[ $1 == "aliases" ]]
then
    aliases
    exit 0
fi

if [[ $1 == "help" ]]
then
    showhelp
    exit 0
fi

if [[ -z $2 ]]
then
    echo "Servername not specified"
else
    CONFIGFILE=$CONFDIR/$2.cnf
    SERVERNAME=$2
fi

if [[ $1 == "start" ]]
then
    if [[ -z $2 ]]
    then
	echo "Missing Instance Name [new]"
	exit 0
    elif [[ $3 == "new" ]]
    then
	CLUSTERCMD='--wsrep-new-cluster --wsrep-cluster-address="gcom://"'
	start
	exit 0
    elif [[ $3 == "add" ]]
    then
	if [[ -z $4 ]]
	then
		echo "Missing existing node name"	
		exit 0
	else
	    	CLUSTERCONF=$CONFDIR/$4.cnf
	    	CLUSTERPORT=$(getvar port $CLUSTERCONF)
		CLUSTERCMD="--wsrep-cluster-address=gcom://127.0.0.1:${CLUSTERPORT}"
		echo "Cluster node specified as ${4} using port ${CLUSTERPORT}"
		start
		exit 0
	fi
    else
	start
	exit 0
    fi
fi

if [[ $1 == "stop" && $# -eq 2 ]]
then
    stop
    exit 0
fi

if [[ $1 == "use" && $# -eq 2 ]]
then
    use
    exit 0
fi

if [[ $1 == "all" && $# -eq 2 ]]
then
    if [[ -z $DEFAULTDATABASE ]]
    then
	DEFAULTDATABASE='mysql'
    fi

    MYSQLBIN=$(which mysql)

    if [[ -z $MYSQLBIN ]]
    then
	echo "No mysql client in path"
	if [[ $(find $MIMBINARIES/*/bin -name mysql | wc -l) -gt 0 ]]
	then 
	    echo "Add one of these to your path:"
	    find $MIMBINARIES/*/bin -name mysql
	fi
	exit 0
    fi

    allports # All ports are defined in $ALLPORTS
    for INSTANCEPORT in ${ALLPORTS[@]}
    do
	echo "${INSTANCEPORT}:"
	echo "---"
	$MYSQLBIN $DEFAULTDATABASE -P $INSTANCEPORT -NBe "$#"
	echo "---"
    done

    exit 0
fi

if [[ $1 == "drop" && $# -eq 2 ]]
then
    if [[ -z $2 ]]
    then
	echo "Missing instance name"
	exit 0
    fi

    DATADIR=$MIMHOME/data/$SERVERNAME
    CONFIGFILE=$CONFDIR/$2.cnf
    DELDATADIR=0
    DELCONFIGFILE=0
    if [[ -d $DATADIR ]]
    then
	DELDATADIR=1
	echo "$DATADIR found"
    else
	echo "No datadir found in $DATADIR"
    fi

    if [[ -e $CONFIGFILE ]]
    then
	DELCONFIGFILE=1
	echo "$CONFIGFILE found"
    else
	echo "No config found in $CONFIGFILE"
    fi

    if [[ $DELDATADIR -eq 1 || $DELCONFIGFILE -eq 1 ]]
    then
	drop
    else
	echo "Nothing to do? Exiting ..."
	exit 0
    fi
fi

if [[ $1 == "create" && $# -eq 3 ]]
then
    if [[ -z $2 ]]
    then
	echo "Missing instance name"
	exit 0
    fi

    if [[ -z $3 ]]
    then
	echo "missing port number"
	exit 0
    else
	PORT=$3
    fi
    ID=$(date '+%s')
    DATADIR=$MIMHOME/data/$SERVERNAME
    TMPDIR=$DATADIR/tmp
    CONFIGFILE=$CONFDIR/$2.cnf
    SERVERNAME=$2
    create
    exit 0
else
    echo "Incorrect Parameters"
    showhelp
    exit 0
fi

echo "Invalid command: $@"
exit 0
