#!/bin/bash

# Set the following in your bash profile
#   MIMHOME, the directory where configs, datadir, and templates will reside
#   MIMBINARIES, the directory where all your mysql/mariadb .tar.gz files are
#   DBSHELLNAME, optional prompt name default is 'mariadb'


firstrun()
{
    if [[ -z $MIMHOME ]]
      then
        echo "MIMHOME has not been declared"
      else
        if [[ ! -d $MIMHOME ]]
          then
            mkdir -p $MIMHOME
        fi

        for dir in ${req_dir[@]}
        do
          if [[ -d $MIMHOME/$dir ]]
            then
              echo "$dir already exists in $MIMHOME"
            else
              echo "creating $MIMHOME/$dir"
              mkdir $MIMHOME/$dir
            fi
        done
    fi
}

getvar()
{
    grep -w $1 $2 | grep -v mysqld | cut -d '=' -f 2 | tail -n 1 | tr -d ' '
}

printstatus()
{
      printf "%-8s %4s %-8s %-20s %s %s %s\n" $1 $2 $3 $4 $5 $6 $7
}

showhelp()
{
printf "help, this message
tutorial, tsome examples
setup, run through first run setup
status, show installed server status
aliases, show aliases for all instances\n
build\t[server name] [port] create a server config
install\t[server name] install a server from config
drop\t[server name] drops instance datadir AND config!
start\t[server name]
stop\t[server name]
client\t[server name] produce path variables for your shell to STDOUT
aliases\tproduce a list of aliases for all available instances to STDOUT
all\t'[SQL Command]' send SQL to all running instances, return to STDOUT
"
exit 0
}

showtutorial()
{
printf "
    This will be improved upon later but here are some basic steps:

    1) export MIMBINARIES, MIMHOME
    2) run 'my' for the first time to create directories in MIMHOME
    3) put template config files in $MIMHOME/templates
    4) put MariaDB/MySQL install files (tar.gz files) in MIMBINARIES
    5) build an instance: my build myFirstInstance 3306
    6 install the instance: my install myFirstInstance
    7) start the instance: my start myFirstInstance
    8) see the instance status: my status
    9) access the instance: my use myFirstInstance
    10) optionally create aliases to login with: my aliases
    11) again optionally create PATH and profile options for this instance: my client myFirstInstance
"
    exit 0
}

install()
{
    BASEDIR=$(getvar basedir $CONFIGFILE)
    DATADIR=$(getvar datadir $CONFIGFILE)
    TMPDIR=$(getvar tmpdir $CONFIGFILE)
    if [[ -d $DATADIR ]]
      then
        echo "$DATADIR already exists, aborting"
        exit 1
      else
        mkdir -p $TMPDIR
        if [[ -d $TMPDIR ]]
        then
          cd $BASEDIR
          ./scripts/mysql_install_db --defaults-file=$CONFIGFILE 2>&1
          exit 0
        else
          echo "Creating $TMPDIR failed, aborting"
          exit 1
        fi
    fi
}

start()
{
    echo '' > /tmp/$SERVERNAME.log
    SERVERPORT=$(getvar port $CONFIGFILE)
    BASEDIR=$(getvar basedir $CONFIGFILE)
    echo "Starting $SERVERNAME on $SERVERPORT"
    $BASEDIR/bin/mysqld_safe --defaults-file=$CONFIGFILE --ledir=$BASEDIR/bin > /tmp/$SERVERNAME.log 2>&1 &
    sleep 2
    cat /tmp/$SERVERNAME.log
}

stop()
{
    SERVERPORT=$(getvar port $CONFIGFILE)
    SERVERSOCK=$(getvar socket $CONFIGFILE)
    BASEDIR=$(getvar basedir $CONFIGFILE)
    echo "Stopping $SERVERNAME on $SERVERPORT"
    $BASEDIR/bin/mysqladmin -uroot --socket=$SERVERSOCK -P $SERVERPORT shutdown
}

status()
{
    if [[  $(ls -1 $CONFDIR | wc -l | tr -d ' ') -lt 1 ]]
      then
      echo "No configs found in $CONFDIR, run 'my build' first"
      exit 0
    fi

    for conf in $(ls $CONFDIR/*.cnf)
      do
        SERVERNAME=$(basename $conf .cnf)
        SERVERPORT=$(getvar port $conf)
        SERVERSOCK=$(getvar socket $conf)
        SERVERPID=$(getvar pid_file $conf)
        MYSQLBIN=$(getvar basedir $conf)/bin/mysql
        if [[ -e $SERVERPID ]]
          then
            MASTERSTATUS=$($MYSQLBIN -uroot -P$SERVERPORT --socket=$SERVERSOCK -NBe "SHOW MASTER STATUS;")
            SERVERSTATUS=$($MYSQLBIN -uroot -P$SERVERPORT --socket=$SERVERSOCK -NBe "SELECT 'ONLINE';")
            SERVERVERSION=$($MYSQLBIN -uroot -P$SERVERPORT --socket=$SERVERSOCK -NBe "SELECT @@version;")
            MASTERLOGFILE=$(echo $MASTERSTATUS | awk '{print $1}')
            MASTERLOGPOS=$(echo $MASTERSTATUS | awk '{print $2}')
            MASTERDO=$(echo $MASTERSTATUS | awk '{print $3}')
            MASTERIGNORE=$(echo $MASTERSTATUS | awk '{print $4}')
            MASTERLOGGTID=$(echo $MASTERSTATUS | awk '{print $5}')

            printstatus $SERVERNAME $SERVERPORT $SERVERSTATUS $SERVERVERSION $MASTERLOGFILE $MASTERLOGPOS $MASTERLOGGTID
          else
            printstatus $SERVERNAME $SERVERPORT "OFFLINE"
        fi
    done
}

aliases()
{
    if [[  $(ls -1 $CONFDIR | wc -l | tr -d ' ') -lt 1 ]]
      then
      echo "No configs found in $CONFDIR, run 'my build' first"
      exit 0
    else
      for conf in $CONFDIR/*.cnf
      do
        SERVERNAME=$(basename $conf .cnf)
        SERVERPORT=$(getvar port $conf)
        SERVERSOCK=$(getvar socket $conf)
        if [[ -z $DBSHELLNAME ]]
        then
          DBSHELLNAME="mariadb"
        fi
        PROMPTOPT="\"${DBSHELLNAME} [\d] > \""
        printf "alias ${SERVERNAME}='mysql -P${SERVERPORT} --socket=${SERVERSOCK} --prompt=${PROMPTOPT}'\n"
      done
    fi
}

do_all()
{
    if [[  $(ls -1 $CONFDIR | wc -l | tr -d ' ') -lt 1 ]]
      then
      echo "No configs found in $CONFDIR, run 'my build' first"
      exit 0
    else
      declare -a mybins  
      for conf in $CONFDIR/*.cnf
      do
        SERVERNAME=$(basename $conf .cnf)
        SERVERPORT=$(getvar port $conf)
        SERVERSOCK=$(getvar socket $conf)
        BASEDIR=$(getvar basedir $conf)
        MYSQLALIVE=$($BASEDIR/bin/mysqladmin -uroot --socket=$SERVERSOCK ping 2>/dev/null | wc -l)

        if [[ $MYSQLALIVE -ne 0 ]]
        then
            printf "${SERVERNAME}\n--\n"
            $BASEDIR/bin/mysql -uroot --socket=$SERVERSOCK -NBe "${DO};"
        fi
      done
    fi
}

use()
{
    if [[ -z $SERVERNAME ]]
    then
      echo "Missing parameter"
      showhelp
      exit 0
    else
      SERVERPORT=$(getvar port $CONFIGFILE)
      SERVERSOCK=$(getvar socket $CONFIGFILE)
      MYSQLBIN=$(getvar basedir $CONFIGFILE)/bin/mysql
      $MYSQLBIN -P $SERVERPORT -uroot --socket=$SERVERSOCK
    fi
}

drop()
{
    if [[ $DELDATADIR -eq 1 ]]
    then
        echo "Removing: $DATADIR"
        rm -Rf $DATADIR
    fi

    if [[ $DELCONFIGFILE -eq 1 ]]
    then
        echo "Removing: $CONFIGFILE"
        rm $CONFIGFILE
    fi
    
    exit 0

}

selectversion()
{
select MYVER in $MIMBINARIES/*.tar.gz;
do
    BASEDIR=${MIMBINARIES}/$(basename $MYVER .tar.gz)
    if [[ ! -d $BASEDIR ]]
    then
      echo "$BASEDIR not found, extracting $MYVER"
      tar -xf $MYVER -C ${MIMBINARIES}
    fi
    echo "Using $MYVER"
    break
done
}

selecttemplate()
{
select MYTEMPLATE in $TEMPLATEDIR/*;
do
    export CONFIGTEMPLATE=$MYTEMPLATE
    echo "Using $CONFIGTEMPLATE"
    break
done
}

selectclient()
{
if [[ -z $SERVERNAME ]]
then
    echo "Missing parameter"
    showhelp
    exit 0
else
    BASEDIR=$(getvar basedir $CONFIGFILE)
    printf "export PATH=${BASEDIR}/bin:\$PATH\n"
    printf "export LD_LIBRARY_PATH=${BASEDIR}/lib\n"
fi
}

build()
{
if [[ -z $ID ]]
then
    echo "server-id was not assigned, using date. Is the date command in your PATH?"
    exit 0
fi

if [[ ! -d $MIMBINARIES ]]
then
    echo "$MIMBINARIES does not exist, aborting"
    exit 0
else
    selecttemplate
    selectversion
fi

if [[ -z $BASEDIR && -z $CONFIGTEMPLATE ]]
then
    echo "Need a Version and Config Template, aborting"
    exit 1

else
    if [[ -e $CONFDIR/${SERVERNAME}.cnf ]]
      then
        echo "${SERVERNAME}.cnf already exists! Overwrite?"
        select yn in "Yes" "No"; do
          case $yn in
            Yes ) break;;
            No ) exit 0;;
          esac
        done
      else touch $CONFDIR/${SERVERNAME}.cnf
    fi

    echo "Adding new detaults to $CONFDIR/${SERVERNAME}.cnf"
    if [[ -e $CONFDIR/${SERVERNAME}.cnf ]]
      then
echo -e "
[mysqld]
user                = $USER
server-id           = $ID
basedir             = $BASEDIR
tmpdir              = $TMPDIR
port                = $PORT
datadir             = $DATADIR
socket              = $DATADIR/mysql.sock
pid_file            = $DATADIR/mysql.pid
log-bin             = $DATADIR/mysql-log-bin
log-bin-index       = $DATADIR/mysql-log-bin.index
log_error           = $DATADIR/error.log
slow_query_log_file = $DATADIR/slow.log

!include $CONFIGTEMPLATE" > $CONFDIR/${SERVERNAME}.cnf
        exit 0
      else
        echo "$CONFDIR/${SERVERNAME}.cnf not found? Exiting."
        exit 1
    fi

fi
}


### MAIN ###
declare -a req_dir=(configs templates data)
ERRORCOUNTER=0

if [[ -z $MIMHOME ]]
then
    echo "MIMHOME not defined"
    let ERRORCOUNTER+=1
fi

if [[ -z $MIMBINARIES ]]
then
    echo "MIMHOME not defined"
    let ERRORCOUNTER+=1
elif [[ ! -d $MIMBINARIES ]]
then
    echo "MIMBINARIES defined, but directory does not exist"
    let ERRORCOUNTER+=1
fi

if [[ $ERRORCOUNTER -ne 0 ]]
then
    echo "Errors encountred, aborting"
    exit 0
else
    CONFDIR=$MIMHOME/configs
    TEMPLATEDIR=$MIMHOME/templates
    if [[ ! -d $MIMHOME ]]
      then
        echo "$MIMHOME does not exist, run setup?"
        select yn in "Yes" "No"; do
          case $yn in
            Yes ) firstrun
                  break
                  ;;
            No )  echo "please create $MIMHOME manually"
                  exit 1
                  ;;
          esac
        done
    fi
fi

if [[ -z $1 ]]
then
    echo "No command specified"
    showhelp
    exit 0
fi

if [[ $1 == "status" ]]
then
    status
    exit 0
fi

if [[ $1 == "setup" ]]
then
    firstrun
    exit 0
fi

if [[ $1 == "aliases" ]]
then
    aliases
    exit 0
fi

if [[ $1 == "help" ]]
then
    showhelp
    exit 0
fi

if [[ $1 == "tutorial" ]]
then
    showtutorial
    exit 0
fi

if [[ -z $2 ]]
then
    echo "Servername not specified"
else
    CONFIGFILE=$CONFDIR/$2.cnf
    SERVERNAME=$2
fi

if [[ $1 == "install" && $# -eq 2 ]]
then
    install
    exit 0
fi

if [[ $1 == "start" && $# -eq 2 ]]
then
    start
    exit 0
fi

if [[ $1 == "stop" && $# -eq 2 ]]
then
    stop
    exit 0
fi

if [[ $1 == "client" && $# -eq 2 ]]
then
    selectclient
    exit 0
fi

if [[ $1 == "use" && $# -eq 2 ]]
then
    use
    exit 0
fi

if [[ $1 == "all" && $# -eq 2 ]]
then
    DO=$2
    do_all
    exit 0
fi

if [[ $1 == "drop" && $# -eq 2 ]]
then
    DATADIR=$MIMHOME/data/$SERVERNAME
    CONFIGFILE=$CONFDIR/$2.cnf
    DELDATADIR=0
    DELCONFIGFILE=0
    if [[ -d $DATADIR ]]
    then
        DELDATADIR=1
        echo "$DATADIR found"
    else
        echo "No datadir found in $DATADIR"
    fi

    if [[ -e $CONFIGFILE ]]
    then
        DELCONFIGFILE=1
        echo "$CONFIGFILE found"
    else
        echo "No config found in $CONFIGFILE"
    fi

    if [[ $DELDATADIR -eq 1 || $DELCONFIGFILE -eq 1 ]]
    then
        drop
    else
        echo "Nothing to do? Exiting ..."
        exit 0
    fi
fi

if [[ $1 == "build" && $# -eq 3 ]]
then
    PORT=$3
    ID=$(date '+%s')
    DATADIR=$MIMHOME/data/$SERVERNAME
    TMPDIR=$DATADIR/tmp
    build
    exit 0
else
    echo "Incorrect Parameters"
    showhelp
    exit 0
fi

echo "Invalid command: $@"
exit 0
