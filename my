#!/bin/bash

# Bring the Fun-ctions...


firstrun()
{
  if [[ -z $DBHOME ]]
    then
      echo "DBHOME has not been declared. Please export DBHOME in your relevant bash profile file, and re-run."
    else
      if [[ ! -d $DBHOME ]]
        then
          mkdir $DBHOME
      fi

      for dir in ${req_dir[@]}
      do
        if [[ -d $DBHOME/$dir ]]
          then
            echo "$dir already exists in $DBHOME"
          else
            echo "creating $DBHOME/$dir"
            mkdir $DBHOME/$dir
          fi
      done
    fi
}

getvar()
{
  grep $1 $2 | grep -v mysqld | cut -d '=' -f 2 | tail -n 1 | tr -d ' '
}

help()
{
  echo "Usage:

          In your profile: export DBHOME=/path/to/DBHOME

          help,     this message

          firstrun, setup directories and default template.

          build,    build a MySQL server config:
                    i.e. my build foo 3306 100 mariadb
                    then run 'my install foo'

          install,  install instance from config file in $CONFDIR
                    my install foo, install the 'foo' instance after it is built.

          status,   MySQL/MariaDB instance status
                    my status, for all instances

          start/stop/restart

          use,      login to a server.

          --

          Tutorial:
                    Run my switch, to install a server version.
                    Run my templates, to see what templates are available.
                    Run my build, create a config using a template.
                    Run my list, to see your new config.
                    Run my install, to create a datadir using the template.
                    Run my start, to start your server.
                    Run my status, to see the server runing.
                    Run my use, to login to the server.
          "
    exit 0
}

install()
{
  if [[ -d $DATADIR/$SERVERNAME ]]
    then
      echo "$DATADIR/$SERVERNAME already exists, aborting"
      exit 1
    else
      mkdir $DATADIR/$SERVERNAME
      CONFIGFILE=$CONFDIR/$SERVERNAME.cnf
      cd $VERDIR/mysql/
      ./scripts/mysql_install_db --defaults-file=$CONFIGFILE 2>&1 | egrep -i 'mysqladmin|secure'
      exit 0
  fi
}

start()
{
  CONFIGFILE=$CONFDIR/$SERVERNAME.cnf
  PORT=$(cat $CONFIGFILE | grep port | awk '{print $3}')
  echo "Starting $SERVERNAME on $PORT"
  mysqld_safe --defaults-file=$CONFIGFILE --ledir=$BASEDIR/bin > /tmp/$SERVERNAME.log 2>&1 &
  sleep 2
  cat /tmp/$SERVERNAME.log
  exit 0
}

stop()
{
  SERVERPORT=$(cat $CONFIGFILE | grep -i port | awk '{print $3}')
  SERVERSOCK=$(cat $CONFIGFILE | grep -i socket | awk '{print $3}')
  echo "Stopping $SERVERNAME on $SERVERPORT"
  mysqladmin -u root --socket=$SERVERSOCK -P $SERVERPORT shutdown
  exit 0
}

status()
{
  CONFCOUNT=$(ls $CONFDIR | wc -l)
  if [[ $CONFCOUNT < 1 ]]
    then
    echo "No configs found in $CONFDIR, run 'my build' first"
    exit 0
  fi

  for conf in $(ls $CONFDIR/*.cnf)
    do
      SERVERNAME=$(echo $conf | sed 's/.*\///g' | cut -d. -f1)
      SERVERPORT=$(cat $conf | grep -i port | awk '{print $3}')
      SERVERSOCK=$(cat $conf | grep -i socket | awk '{print $3}')
      if [[ -e $DATADIR/$SERVERNAME/mysql.pid ]]
        then
          MASTERSTATUS=$(mysql -uroot -P$SERVERPORT --socket=$SERVERSOCK -Be "SHOW MASTER STATUS;" | tail -1)
          SERVERSTATUS=$(mysql -uroot -P$SERVERPORT --socket=$SERVERSOCK -Be "SELECT 'ONLINE';" | tail -1)
          MASTERLOGFILE=$(echo $MASTERSTATUS | awk '{print $1}')
          MASTERLOGPOS=$(echo $MASTERSTATUS | awk '{print $2}')
          MASTERDO=$(echo $MASTERSTATUS | awk '{print $3}')
          MASTERIGNORE=$(echo $MASTERSTATUS | awk '{print $4}')
          MASTERLOGGTID=$(echo $MASTERSTATUS | awk '{print $5}')

          echo -e "$SERVERNAME\t$SERVERSTATUS\t$MASTERLOGFILE\t$MASTERLOGPOS\t$MASTERLOGGTID"
        else
          echo -e "$SERVERNAME\tOFFLINE"
      fi
    done
}

use()
{
  SERVERPORT=$(cat $CONFIGFILE | grep -i port | awk '{print $3}')
  SERVERSOCK=$(cat $CONFIGFILE | grep -i socket | awk '{print $3}')
  mysql -P $SERVERPORT -uroot --socket=$SERVERSOCK
}

list()
{
CONFCOUNT=$(ls $CONFDIR | wc -l)
if [[ $CONFCOUNT < 1 ]]
  then
  echo "No configs found in $CONFDIR, run 'my build' first"
  exit 0
  fi

if [[ -e $CONFDIR ]]
  then
    awk 'BEGIN { printf "%-10s %-10s %s\n", "Name", "Config","datadir"}'

    for conf in $(ls $CONFDIR)
      do
        SERVERNAME=$(echo $conf | sed 's/.*\///g' | cut -d. -f1)
        SERVERCONF=$(echo $conf | sed 's/.*\///g')
        SERVERDIR=$(cat $CONFDIR/$conf | grep -i datadir | awk '{print $3}')

        if [[ -d $DATADIR/$SERVERNAME ]]
          then
            SERVERDIRSTATUS="$SERVERDIR"
          else
            SERVERDIRSTATUS="NOT INSTALLED"
          fi
        
        awk 'BEGIN { printf "%-10s %-10s %s\n", $SERVERNAME, $SERVERCONF, $SERVERDIRSTATUS}'
        echo -e "$SERVERNAME\t\t$SERVERCONF\t\t$SERVERDIRSTATUS"
      done
  else
    echo "$CONFDIR not found?"
    exit 1
fi
}

temp()
{
  echo "deprecated"
  exit 0

if [[ -d $TEMPLATEDIR ]]
  then
    echo -e "Existing Version Config Templates:"
    for conf in $(ls $TEMPLATEDIR | grep -v template.cnf)
      do
        echo $conf
      done
  else
    echo "$TEMPLATEDIR not found?"
    exit 1
fi
}

selectversion()
{
select MYVER in $VERDIR/*;
do
  MYVERTAR=$MYVER
  MYVERDIR=$(echo $MYVER | sed 's/.*\///g')
  if [[ -d $MYVERDIR ]]
  then
    echo "basedir is: $MYVERDIR"
    export BASEDIR=$MYVERDIR
  else
    tar -xvf $MYVER -C $MYVERDIR
  fi
done
}

selecttemplate()
{
select MYTEMPLATE in $TEMPLATEDIR/*;
do
  if [[ -d $TEMPLATEDIR ]]
  then
    CONFIGTEMPLATE=$MYTEMPLATE
  fi
done
}


switch()
{
  # Exit, this is unused
  echo "This command is deprecated, build, now sets a specific basedir"
  exit 0

select MYVER in $VERDIR/*.gz;
do

  MYVERTAR=$(echo $MYVER | sed 's/.*\///g')
  MYVERSTR=$(echo $MYVERTAR | sed 's/.tar.gz//')

  if [[ -e $VERDIR/CURRENT ]]
    then
       CURVER=`cat $VERDIR/CURRENT`
       echo "Current version is: $CURVER"

       if [[ -d $VERDIR/$CURVER ]]
         then
          echo "Deleting $VERDIR/$CURVER"
          rm -Rf $VERDIR/$CURVER

          if [[ -h $VERDIR/mysql ]]
            then
              unlink $VERDIR/mysql
          fi

         else
           echo "Current version found, but no directory?"
       fi
    else
      echo "No current version, installing new..."
  fi

  echo $MYVERSTR > $VERDIR/CURRENT

  tar -xf $VERDIR/$MYVERTAR -C $VERDIR

  if [[ -d $VERDIR/$MYVERSTR ]]
    then
      ln -s $VERDIR/$MYVERSTR $VERDIR/mysql
  else
    echo "Extraction failed?"
    exit 1
  fi

      echo "Current version is now: `cat $VERDIR/CURRENT`"
      break
done
}

build()
{
if [[ -d $DBINSTDIR ]]
then
  echo "$DBINSTDIR does not exist, aborting"
  exit 1
else
  selecttemplate
  selectversion
fi

if [[ -z $BASEDIR && -z $CONFIGTEMPLATE ]]
then
  echo "Need a Version and Config Template, aborting"
  exit 1

else
  if [[ -e $CONFDIR/$SERVERNAME.cnf ]]
    then
      echo "$SERVERNAME.cnf already exists! Overwrite?"
      select yn in "Yes" "No"; do
        case $yn in
          Yes ) break;;
          No ) exit 0;;
        esac
      done
  fi

  echo "Adding new detaults to $CONFDIR/$SERVERNAME.cnf"
  if [[ -e $CONFDIR/$SERVERNAME.cnf ]]
    then
        echo -e "
[mysqld]
!include $TEMPLATEDIR/$CONFIGTEMPLATE.cnf

user                           = $USER
server-id                      = $ID
basedir                        = $BASEDIR
tmpdir                         = $TMPDIR
port                           = $PORT
datadir                        = $DATADIR/$SERVERNAME
socket                         = $DATADIR/$SERVERNAME/mysql.sock
pid_file                       = $DATADIR/$SERVERNAME/mysql.pid
log-bin                        = $DATADIR/$SERVERNAME/mysql-log-bin
log-bin-index                  = $DATADIR/$SERVERNAME/mysql-log-bin.index
log_error                      = $DATADIR/$SERVERNAME/error.log
slow_query_log_file            = $DATADIR/$SERVERNAME/slow.log
        " > $CONFDIR/$SERVERNAME.cnf
      exit 0
    else
      echo "$CONFDIR/$SERVERNAME.cnf not found? Exiting."
      exit 1
  fi

fi
}


#
# MAIN, warning, lazy evaluation!
#
# Add check for mysql lib in $LD_LIBRARY_PATH and maybe DYLD_LIBRARY_PATH on mac.

declare -a req_dir=(verions configs templates data)

if [[ -z $DBHOME && -z $DBINSTDIR ]]
then
  echo "DBHOME and DBINSTDIR not defined, aborting"
  exit 1
else
  VERDIR=$DBINSTDIR
  CONFDIR=$DBHOME/configs
  TEMPLATEDIR=$DBHOME/templates
  DATADIR=$DBHOME/data
  if [[ ! -d $DBHOME ]]
    then
      echo "$DBHOME does not exist, run setup?"
      select yn in "Yes" "No"; do
        case $yn in
          Yes ) firstrun
                break
                ;;
          No )  echo "please create $DBHOME manually"
                exit 1
                ;;
        esac
      done
  fi
fi


if [[ $1 == "build" ]]
  then
    if [[ $# -ne 5 ]]
      then
        echo "Wrong Parameters"
        help
        exit 1
      else
        SERVERNAME=$2
        PORT=$3
        ID=$4
        TEMPLATE=$5
    fi
fi

if [[ $1 == "install" ]]
  then
    if [[ $# -ne 2 ]]
      then
        echo "Wrong Paramters"
        help
        exit 1
      else
        CONFIGFILE=$CONFDIR/$2.cnf
        SERVERNAME=$2
    fi
fi

if [[ -z $1 ]]
  then
  help
  exit 0
else
    if [[ "`type -t $1`" = 'function'  ]]
      then
        CONFIGFILE=$CONFDIR/$2.cnf
        SERVERNAME=$2
        $1
      else
        echo "That is not a valid command"
        help
        exit 1
    fi
fi
