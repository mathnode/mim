#!/bin/bash

# Set the following in your bash profile
#   DBHOME, the directory where configs, datadir, and templates will reside
#   DBINSTDIR, the directory where all your mysql/mariadb .tar.gz files are
#   DBSHELLNAME, optional prompt name


firstrun()
{
  if [[ -z $DBHOME ]]
    then
      echo "DBHOME has not been declared"
    else
      if [[ ! -d $DBHOME ]]
        then
          mkdir -p $DBHOME
      fi

      for dir in ${req_dir[@]}
      do
        if [[ -d $DBHOME/$dir ]]
          then
            echo "$dir already exists in $DBHOME"
          else
            echo "creating $DBHOME/$dir"
            mkdir $DBHOME/$dir
          fi
      done
    fi
}

getvar()
{
  grep -w $1 $2 | grep -v mysqld | cut -d '=' -f 2 | tail -n 1 | tr -d ' '
}

showhelp()
{
printf "
help, this message
tutorial, some examples
setup, run through first run setup
status, show installed server status\n
build\t[server name]\t[port]\t[server-id]
install\t[server name]
start\t[server name]
stop\t[server name]
client\t[server name]
"
  exit 0
}

showtutorial()
{
printf "
  Sorry this will be improved upon later but here are some basic steps:

  1) export DBINSTDIR, DBHOME
  2) run 'my' for the first time to create directories in DBHOME
  3) put template config files in $DBHOME/templates
  4) put MariaDB/MySQL install files (tar.gz files) in DBINSTDIR
  5) build an instance: my build myFirstInstance 3306 100
  6 install the instance: my install myFirstInstance
  7) start the instance: my start myFirstInstance
  8) see the instance status: my status
  9) access the instance: my use myFirstInstance
  10) optionally create aliases to login with: my aliases
  11) again optionally create PATH and profile options for this instance: my client myFirstInstance
"
  exit 0
}

install()
{
  BASEDIR=$(getvar basedir $CONFIGFILE)
  DATADIR=$(getvar datadir $CONFIGFILE)
  TMPDIR=$(getvar tmpdir $CONFIGFILE)
  if [[ -d $DATADIR ]]
    then
      echo "$DATADIR already exists, aborting"
      exit 1
    else
      mkdir -p $TMPDIR
      if [[ -d $TMPDIR ]]
      then
        cd $BASEDIR
        ./scripts/mysql_install_db --defaults-file=$CONFIGFILE 2>&1 | egrep -i 'mysqladmin|secure'
        exit 0
      else
        echo "Creating $TMPDIR failed, aborting"
        exit 1
      fi
  fi
}

start()
{
  echo '' > /tmp/$SERVERNAME.log
  SERVERPORT=$(getvar port $CONFIGFILE)
  BASEDIR=$(getvar basedir $CONFIGFILE)
  echo "Starting $SERVERNAME on $SERVERPORT"
  $BASEDIR/bin/mysqld_safe --defaults-file=$CONFIGFILE --ledir=$BASEDIR/bin > /tmp/$SERVERNAME.log 2>&1 &
  sleep 2
  cat /tmp/$SERVERNAME.log
}

stop()
{
  SERVERPORT=$(getvar port $CONFIGFILE)
  SERVERSOCK=$(getvar socket $CONFIGFILE)
  BASEDIR=$(getvar basedir $CONFIGFILE)
  echo "Stopping $SERVERNAME on $SERVERPORT"
  $BASEDIR/bin/mysqladmin -u root --socket=$SERVERSOCK -P $SERVERPORT shutdown
}

status()
{
  if [[  $(ls $CONFDIR | wc -l | tr -d ' ') < 1 ]]
    then
    echo "No configs found in $CONFDIR, run 'my build' first"
    exit 0
  fi

  for conf in $(ls $CONFDIR/*.cnf)
    do
      SERVERNAME=$(basename $conf .cnf)
      SERVERPORT=$(getvar port $conf)
      SERVERSOCK=$(getvar socket $conf)
      SERVERPID=$(getvar pid_file $conf)
      MYSQLBIN=$(getvar basedir $conf)/bin/mysql
      if [[ -e $SERVERPID ]]
        then
          MASTERSTATUS=$($MYSQLBIN -uroot -P$SERVERPORT --socket=$SERVERSOCK -Be "SHOW MASTER STATUS;" | tail -1)
          SERVERSTATUS=$($MYSQLBIN -uroot -P$SERVERPORT --socket=$SERVERSOCK -Be "SELECT 'ONLINE';" | tail -1)
          MASTERLOGFILE=$(echo $MASTERSTATUS | awk '{print $1}')
          MASTERLOGPOS=$(echo $MASTERSTATUS | awk '{print $2}')
          MASTERDO=$(echo $MASTERSTATUS | awk '{print $3}')
          MASTERIGNORE=$(echo $MASTERSTATUS | awk '{print $4}')
          MASTERLOGGTID=$(echo $MASTERSTATUS | awk '{print $5}')

          echo -e "$SERVERNAME\t$SERVERSTATUS\t$MASTERLOGFILE\t$MASTERLOGPOS\t$MASTERLOGGTID"
        else
          echo -e "$SERVERNAME\tOFFLINE"
      fi
    done
}

aliases()
{
for conf in $CONFDIR/*.cnf
  do
    SERVERNAME=$(basename $conf .cnf)
    SERVERPORT=$(getvar port $conf)
    SERVERSOCK=$(getvar socket $conf)
    if [[ -z $DBSHELLNAME ]]
    then
      DBSHELLNAME="mariadb"
    fi
    PROMPTOPT="\"${DBSHELLNAME} [\d] > \""
    printf "alias ${SERVERNAME}='mysql -P${SERVERPORT} --socket=${SERVERSOCK} --prompt=${PROMPTOPT}'"
  done
}

use()
{
  if [[ -z $SERVERNAME ]]
  then
    echo "Missing parameter"
    showhelp
    exit 0
  else
    SERVERPORT=$(getvar port $CONFIGFILE)
    SERVERSOCK=$(getvar socket $CONFIGFILE)
    MYSQLBIN=$(getvar basedir $CONFIGFILE)/bin/mysql
    $MYSQLBIN -P $SERVERPORT -uroot --socket=$SERVERSOCK
  fi
}

selectversion()
{
select MYVER in $DBINSTDIR/*.tar.gz;
do
  BASEDIR=${DBINSTDIR}/$(basename $MYVER .tar.gz)
  if [[ ! -d $BASEDIR ]]
  then
    echo "$BASEDIR not found, extracting $MYVER"
    tar -xf $MYVER -C ${DBINSTDIR}
  fi
  echo "Using $MYVER"
  break
done
}

selecttemplate()
{
select MYTEMPLATE in $TEMPLATEDIR/*;
do
  export CONFIGTEMPLATE=$MYTEMPLATE
  echo "Using $CONFIGTEMPLATE"
  break
done
}

selectclient()
{
if [[ -z $SERVERNAME ]]
then
  echo "Missing parameter"
  showhelp
  exit 0
else
  BASEDIR=$(getvar basedir $CONFIGFILE)
  printf "export PATH=${BASEDIR}/bin:\$PATH\n"
  printf "export LD_LIBRARY_PATH=${BASEDIR}/lib:\$LD_LIBRARY_PATH\n"
fi
}

build()
{
if [[ ! -d $DBINSTDIR ]]
then
  echo "$DBINSTDIR does not exist, aborting"
  exit 1
else
  selecttemplate
  selectversion
fi

if [[ -z $BASEDIR && -z $CONFIGTEMPLATE ]]
then
  echo "Need a Version and Config Template, aborting"
  exit 1

else
  if [[ -e $CONFDIR/$SERVERNAME.cnf ]]
    then
      echo "$SERVERNAME.cnf already exists! Overwrite?"
      select yn in "Yes" "No"; do
        case $yn in
          Yes ) break;;
          No ) exit 0;;
        esac
      done
    else touch $CONFDIR/$SERVERNAME.cnf
  fi

  echo "Adding new detaults to $CONFDIR/$SERVERNAME.cnf"
  if [[ -e $CONFDIR/$SERVERNAME.cnf ]]
    then
        echo -e "
[mysqld]
!include $TEMPLATEDIR/$CONFIGTEMPLATE.cnf

user                = $USER
server-id           = $ID
basedir             = $BASEDIR
tmpdir              = $TMPDIR
port                = $PORT
datadir             = $DATADIR
socket              = $DATADIR/mysql.sock
pid_file            = $DATADIR/mysql.pid
log-bin             = $DATADIR/mysql-log-bin
log-bin-index       = $DATADIR/mysql-log-bin.index
log_error           = $DATADIR/error.log
slow_query_log_file = $DATADIR/slow.log
" > $CONFDIR/$SERVERNAME.cnf
      exit 0
    else
      echo "$CONFDIR/$SERVERNAME.cnf not found? Exiting."
      exit 1
  fi

fi
}


# MAIN with lazy evaluation
# Add check for mysql lib in $LD_LIBRARY_PATH and maybe DYLD_LIBRARY_PATH on mac.

declare -a req_dir=(verions configs templates data)
ERRORCOUNTER=0

if [[ -z $DBHOME ]]
then
  echo "DBHOME not defined"
  let ERRORCOUNTER+=1
fi

if [[ -z $DBINSTDIR ]]
then
  echo "DBHOME not defined"
  let ERRORCOUNTER+=1
elif [[ ! -d $DBINSTDIR ]]
then
  echo "DBINSTDIR defined, but directory does not exist"
  let ERRORCOUNTER+=1
fi

if [[ $ERRORCOUNTER -ne 0 ]]
then
  echo "Errors encountred, aborting"
  exit 0
else
  CONFDIR=$DBHOME/configs
  TEMPLATEDIR=$DBHOME/templates
  if [[ ! -d $DBHOME ]]
    then
      echo "$DBHOME does not exist, run setup?"
      select yn in "Yes" "No"; do
        case $yn in
          Yes ) firstrun
                break
                ;;
          No )  echo "please create $DBHOME manually"
                exit 1
                ;;
        esac
      done
  fi
fi

if [[ -z $1 ]]
then
  echo "No command specified"
  showhelp
  exit 0
fi

if [[ $1 == "status" ]]
then
  status
  exit 0
fi

if [[ $1 == "setup" ]]
then
  firstrun
  exit 0
fi

if [[ $1 == "tutorial" ]]
then
  showtutorial
  exit 0
fi

if [[ -z $2 ]]
then
  echo "Servername not specified"
else
  CONFIGFILE=$CONFDIR/$2.cnf
  SERVERNAME=$2
fi

if [[ $1 == "install" && $# == 2 ]]
then
  install
  exit 0
fi

if [[ $1 == "start" && $# == 2 ]]
then
  start
  exit 0
fi

if [[ $1 == "stop" && $# == 2 ]]
then
  stop
  exit 0
fi

if [[ $1 == "client" && $# == 2 ]]
then
  selectclient
  exit 0
fi

if [[ $1 == "use" && $# == 2 ]]
then
  use
  exit 0
fi

if [[ $1 == "build" && $# == 4 ]]
then
  PORT=$3
  ID=$4
  DATADIR=$DBHOME/data/$SERVERNAME
  TMPDIR=$DATADIR/tmp
  build
  exit 0
else
  echo "Incorrect Parameters"
  echo "my build [server name] [port] [server-id] [config template]"
  exit 0
fi

echo "Invalid command: $@"
exit 0
